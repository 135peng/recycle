{"remainingRequest":"E:\\桌面\\程序\\springboota1ly5177\\src\\main\\resources\\admin\\admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\桌面\\程序\\springboota1ly5177\\src\\main\\resources\\admin\\admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\桌面\\程序\\springboota1ly5177\\src\\main\\resources\\admin\\admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\桌面\\程序\\springboota1ly5177\\src\\main\\resources\\admin\\admin\\src\\views\\modules\\jiuyixinxi\\add-or-update.vue?vue&type=template&id=284a3002&scoped=true&","dependencies":[{"path":"E:\\桌面\\程序\\springboota1ly5177\\src\\main\\resources\\admin\\admin\\src\\views\\modules\\jiuyixinxi\\add-or-update.vue","mtime":1745074553353},{"path":"E:\\桌面\\程序\\springboota1ly5177\\src\\main\\resources\\admin\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\桌面\\程序\\springboota1ly5177\\src\\main\\resources\\admin\\admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\桌面\\程序\\springboota1ly5177\\src\\main\\resources\\admin\\admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\桌面\\程序\\springboota1ly5177\\src\\main\\resources\\admin\\admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}